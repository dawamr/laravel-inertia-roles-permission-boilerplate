# Multi-stage build untuk production
FROM node:18-alpine AS node-builder

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci --only=production

# Copy source dan build assets
COPY . .
RUN npm run build

# Production stage
FROM dunglas/frankenphp:latest-php8.3-alpine

# Set working directory
WORKDIR /app

# Install system dependencies (minimal untuk production)
RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    libzip-dev \
    postgresql-dev \
    zip \
    unzip \
    && rm -rf /var/cache/apk/*

# Install PHP extensions
RUN apk add --no-cache $PHPIZE_DEPS \
    && docker-php-ext-install pdo pdo_mysql pdo_pgsql zip exif pcntl gd opcache intl \
    && docker-php-ext-enable opcache \
    && apk del $PHPIZE_DEPS \
    && rm -rf /tmp/pear

# Configure PHP untuk production
RUN echo "opcache.enable=1" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.memory_consumption=256" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.interned_strings_buffer=16" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.max_accelerated_files=20000" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.validate_timestamps=0" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.save_comments=1" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.fast_shutdown=0" >> /usr/local/etc/php/conf.d/opcache.ini

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy application files
COPY . /app

# Copy built assets dari node-builder stage
COPY --from=node-builder /app/public/build /app/public/build

# Clear any existing bootstrap cache yang mungkin berisi dev dependencies
RUN rm -rf bootstrap/cache/*.php

# Install PHP dependencies untuk production
RUN composer install --optimize-autoloader --no-dev --no-interaction --no-ansi --no-progress

# Set permissions
RUN chmod -R 775 /app/storage /app/bootstrap/cache \
    && chown -R www-data:www-data /app/storage /app/bootstrap/cache

# Clear existing cache dan generate application key
RUN php artisan cache:clear \
    && php artisan config:clear \
    && php artisan route:clear \
    && php artisan view:clear \
    && php artisan key:generate --force \
    && php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

# Expose ports
# EXPOSE 80
# EXPOSE 443


# Start FrankenPHP dengan workers untuk production
CMD ["php", "artisan", "octane:frankenphp", "--host=0.0.0.0", "--port=8000", "--workers=auto", "--max-requests=1000"]
